<?php

namespace T4\FYITable\Model;

use T4\FYITable\Model\Traits\AttributesSupportingTrait;
use T4\FYITable\Model\Traits\JsonSerializableDeserializableTrait;

class Row implements \JsonSerializable
{

    use JsonSerializableDeserializableTrait;

    /**
     * The class using the JsonSerializableDeserializableTrait trait MUST have a constant SerializableProps
     * Map of json property name to object property name (for serialization)
     *
     * @var array = ['handle' => 'handle', 'name' => 'name', 'attributes' => 'attributes']
     */
    protected const SERIALIZABLE_PROPS = ['attributes' => 'attributes', 'keys' => 'keys', 'values' => 'values'];

    use AttributesSupportingTrait;

    /**
     * @var Table
     */
    protected $table;

    /**
     * @var array = ['column_handle' => 'value', 'column_handle2' => 'value2']
     */
    protected $values = [];

    /**
     * @var array ['key' => true]
     */
    protected $keys = [];

    public function __construct(Table $table, array $values = [])
    {
        $this->table = $table;
        $this->addValues($values);
    }

    /**
     * Sets an array of column values, registers the columns with the table
     *
     * @param array $values = ['column_handle' => 'value', 'column_handle2' => 'value2']
     * @return Row
     */
    public function addValues(array $values): Row
    {
        foreach (array_keys($values) as $columnHandle) {
            $this->keys[$columnHandle] = true;
            $this->table->addColumn($columnHandle);
        }
        $this->values = $values;
        return $this;
    }

    /**
     * @param string $columnHandle
     * @param null $default
     * @return mixed|null
     */
    public function getValue(string $columnHandle, $default = null)
    {
        return isset($this->keys[$columnHandle]) ? $this->values[$columnHandle] : $default;
    }

    /**
     * Adds a value to the row, registers the columns with the table
     *
     * @param string $columnHandle
     * @param $value
     * @return Row
     */
    public function addValue(string $columnHandle, $value): Row
    {
        $this->table->addColumn($columnHandle);
        $this->keys[$columnHandle] = true;
        $this->values[$columnHandle] = $value;
        return $this;
    }

    /**
     * Returns values for all columns registered in the Table
     * @param null $default
     * @return array ['column_handle' => 'value', 'column_handle2' => 'value2']
     */
    public function getValues($default = null): array
    {
        $result = [];
        foreach ($this->table->getColumns() as $column) {
            $result[$column->getHandle()] = $this->getValue($column->getHandle(), $default);
        }
        return $result;
    }

    /**
     * Returns the raw row but does not take into account columns generated by other rows
     *
     * @return array ['column_handle' => 'value', 'column_handle2' => 'value2']
     */
    public function getRaw(): array
    {
       return $this->values;
    }

}